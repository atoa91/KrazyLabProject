source('~/.active-rstudio-document')
plot(k, p, type : "h", xlab = "k",
ylab = "probability", ylim = (0, max(p)))
p <- c(1,2,3,2,1,)/9
plot(k, p, type : "h", xlab = "k",
ylab = "probability", ylim = (0, max(p)))
plot(k, p, type : "h", xlab = "k",
ylab = "probability", ylim = c(0, max(p)))
p <- c(1,2,3,2,1,)/9
p <- c(1,2,3,2,1)/9
plot(k, p, type : "h", xlab = "k",
ylab = "probability", ylim = c(0, max(p)))
plot(k, p, type = "h", xlab = "k",
ylab = "probability", ylim = c(0, max(p)))
k <- 0:2
p <- c(1,2,1)/4
sample(k, size = 10, prob = p)
k <- 0:2
p <- c(1,2,1)/4
sample(k, size = 10, prob = p)
sample(k, size = 1, prob = p)
sample(k, size = 10, prob = p)
?sample
sample(k, size = 10, replace = FALSE, prob = p)
sample(k, size = 10, replace = TRUE, prob = p)
sample(1:6, size = 1) + sample(1:6, size = 1)
sample(1:6, size = 1) + sample(1:6, size = 1)
sample(k, size = 10, replace = TRUE, prob = p)
sample(k, size = 10, replace = TRUE, prob = p)
for
?for
sample(0:1, size = 10, replace = TRUE)
sample(1:6, size = 10, replace = TRUE)
smaple(1:6, size = 10, replace = TRUE) + sample(1:6, size = 10, replace = TRUE)
sample(1:6, size = 10, replace = TRUE) + sample(1:6, size = 10, replace = TRUE)
sample(rep(0:1), c(3200, 6800), size = 10, replace = T)
sample(0:1), size = 10, replace = T, prob = c(1-.62, .62))
sample(0:1, size = 10, replace = T, prob = c(1-.62, .62))
dunif(x = 1, min = 0, max =3)
punif(q = 2, min = 0, max = 3)
qunif(p = 1/2, min = 0, max = 3)
runif(n=1, min = 0, max = 3)
choose(10,5) * (1/2)^5(1/2)^(10-5)
choose(10,5) * (1/2)^5*(1/2)^(10-5)
dbinom(5, size = 10, prob = 1/2)
1 - pbinom(6, size = 10, prob = 1/2, lower.tail = FALSE)
?pbinom
opar <- par(no.readonly = TRUE)
res <- runif(50, min = 0, max = 10)
par(fig = c(0,10,0,.35))
par(fig = c(0,1,0,.35))
boxplot(res, horizontal = TRUE, bty = "n", xlab = "uniform sample")
hist(res, prob = TRUE, main = "", col = gray(.9))
lines(density(res), lty = 2)
curve(dunif(x, min = 0, max = 10), lwd = 2, add =TRUE
curve(dunif(x, min = 0, max = 10), lwd = 2, add =TRUE)
curve(dunif(x, min = 0, max = 10), lwd = 2, add =TRUE)
par(fig = c(0,1,.25,1), new = TRUE)
hist(res, prob = TRUE, main = "", col = gray(.9))
lines(density(res), lty = 2)
curve(dunif(x, min = 0, max = 10), lwd = 2, add =TRUE)
rug(res)
res <- rexp(50, rate = 1/5)
res
par(fig = c(0,1,0,.35))
boxplot(res, horizontal = TRUE, bty = "n", xlab = "exponential sample")
par(fig = c(0,1,.25,1), new = TRUE)
tmp.hist <- hist(res, plot = TRUE)
tmp.edens <- density(res)
tmp.dens <- dexp(0, rate = 1/5)
y.max <- max(tmp.hist$density, tmp.edens$y, tmp. dens)
y.max <- max(tmp.hist$density, tmp.edens$y, tmp.dens)
hist(res, ylim = c(0, y.max), prob = TRUE, main = "", col = gray(.9))
lines(density(res), lty = 2)
?par
rug(res)
qt(c(.025,.975), df = 10)
qf(c(.025,.975), df1 =10, df2 = 5)
qchisq(c(.025, .975), df = 10)
x <- 25
n <- 1; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
n <- 1; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
x <- 25; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), -3.3,
xlab = "x", ylab = "Densities of sample mean", bty = "l")
n <- 1; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
n <- 5; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
x <- 25; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), -3.3,
xlab = "x", ylab = "Densities of sample mean", bty = "l")
n <- 1; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
n <- 5; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
n <- 1; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE)
x <- 25; curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), -3.3,
xlab = "x", ylab = "Densities of sample mean", bty = "l")
mu <- 70.2; sigma = 2.89; n <- 25
diff(pnorm(70:71, mu, sigma/sqrt(n)))
m <- 50
mx <- rep(0,m)
n.value <- c(5,10,15,30,50)
plot(0,0, type = "n", xlim = c(0,1), ylim = c(0,10), ylab = "density",
xlab = "mx", main = "uniform mean to normal")
for (k in 1:length(n.value)){
n = n.value[k]
for(i in 1:m){
mx[i] = mean(rexp(n, rate = 1))
}
lines(density(mx), lty = k, col = k)
}
m <- 500
res.25 <_ c(); res.100 <- c(); res.400 <- c()
res.25 <_c(); res.100 <- c(); res.400 <- c()
res.25 <-  c(); res.100 <- c(); res.400 <- c()
f <- function(n) median(rexp(n))
for(i in 1:m)res.25[i] <- f(25)
summary(res.25)
for(i in 1:m)res.400[i] <- f(400)
summary(res.400)
plot(density(res.400), xlim = range(res.25), type = "l", main = "",
xlab = "sampling distributions of median for n =25, 100, 400")
for(i in 1:m)res.100[i] <- f(100)
plot(density(res.400), xlim = range(res.25), type = "l", main = "",
xlab = "sampling distributions of median for n =25, 100, 400")
lines(density(res.100))
lines(density(res.400))
lines(density(res.25))
library("MASS")
height.survey <- survey$Height
mean(height.survey, na.rm = TRUE)
head(survey)
library("dismo")
install.packages("dismo")
library(dismo)
map_Kor <- gmap("Korea")
map_Kor <- gmap("SouthKorea")
install.packages("rgdal")
library(rgdal)
map_Kor <- gmap("SouthKorea")
install.packages("")
install.packages("XML")
library(XML)
map_Kor <- gmap("SouthKorea")
plot(map_Kor)
?dismo
map_Kor <- gmap("SouthKorea", type = "satellite")
plot(map_Kor)
map_seoul <- gmap("seoul")
plot(map_seoul)
?maptools
??maptools
?classInt
??classInt
plot(map_seoul)
install.packages(RgoogleMaps)
install.packages("RgoogleMaps")
library(RgoogleMaps)
map_seoul <- GetMap(center center = C(37,126), zoom = 20, destfile = "seoul.png",
maptype = "satelite")
map_seoul <- GetMap(center center = C(37,126), zoom = 20, destfile = "seoul.png",
maptype = "satellite")
map_seoul <- GetMap(center center = C(37,126), zoom = 20, destfile = "seoul.png",
map_seoul <- GetMap(center = C(37,126), zoom = 20, destfile = "seoul.png",
maptype = "satellite")
map_seoul <- GetMap(center = C(37,126), zoom = 20, destfile = "seoul.png",
maptype = "satellite")
?GetMap
map_seoul <- GetMap(center = C(lat = 37, lon = 126), size = c(640, 640), zoom = 20, destfile = "seoul.png",
maptype = "satellite")
map_seoul <- GetMap(center = C(lat = 37, lon = 126), size = c(640, 640), zoom = 10, destfile = "seoul.png",
maptype = "satellite")
map_seoul <- GetMap(center = C(37, 126), size = c(640, 640), zoom = 10, destfile = "seoul.png",
maptype = "satellite")
map_seoul <- GetMap(center = c(37, 126), size = c(640, 640), zoom = 10, destfile = "seoul.png",
maptype = "satellite")
plot(map_seoul)
plot(map_seoul)
map_seoul
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
plot(map_seoul)
map_seoul
library(ggmap)
install.packages("ggmap")
library(ggmap)
qmap("Seoul")
qmap("Seoul", zoom = 10)
qmap("Seoul", zoom = 5)
qmap("Seoul", zoom = 15)
qmap("Seoul", zoom = 12)
qmap("Seoul", zoom = 13)
map_seoul2 <- spTransform(Seoul, CRS("+init=epsg:4326"))
map_seoul2 <- spTransform(seoul, CRS("+init=epsg:4326"))
install.packages("geonames")
library(geonames)
options(geonamesUsername="bnosac")
GNcountryInfo(country = "BE", lang = "kor")
bnosacoffice <- list()
bnosacoffice$Ion <- 37
bnosacoffice$lon <- 37
bnosacoffice$lat <- 126
datasets::"iris"
rm(list = )
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
d
apply(d, 1, sum)
apply(d, 2, sum)
head(iris)
apply(iris[, 1:4], 2, sum)
apply(iris[, 1:4], 2, avg)
colSums((iris[, 1:4]))
colMeans(iris[,1:4], dims = 1)
apply(iris[, 1:4], 1, function(row) { print(row)})
install.packages("plyr")
library(plyr)
library("plyr")
function(row) { row$Sepal.Length >= 5.0 &
row$Species == "setosa"})$V1
adply(iris,
1,
function(row) { row$Sepal.Length >= 5.0 &
row$Species == "setosa"})$V1
adply(iris,
1,
function(row) { row$Sepal.Length >= 5.0 &
row$Species == "setosa"})$V1
adply(iris,
1,
function(row) {row$Sepal.Length >= 5.0 &
row$Species == "setosa"})$V1
plyr(iris,
1,
function(row) { row$Sepal.Length >= 5.0 &
row$Species == "setosa"})$V1
result <- lapply(1:3, function(x) { x*2 })
result
unlist(result)
x <- list(a=1:3, b=4:6)
x
lapply(iris[, 1:4], mean)
d <- as.data.frame(matrix(unlist(lapply(iris[, 1:4], mean)),
ncol = 4, byrow = TRUE))
names(d) <_ names(irir[, 1:4])
d
names(d) <- names(irir[, 1:4])
d
names(d) <- names(iris[, 1:4])
d
data.frame(do.call(cbind, lapply(iris[, 1:4], mean)))
lapply(iris[, 1:4], mean)
sapply(iris[, 1:4], mean)
x <- sapply(iris[, 1:4], mean)
class(x)
as.data.frame(x)
as.data.frame(t(x))
x <- seq(-3. 3, .1)
y <- x
outer(x, y, function(x, y) { dmvnorm(cbind(x, y))})
f <- function(x, y) { dmvnorm(cbind(x, y)) }
persp(x, y, outer(x, y, f), theta = 30, phi = 30)
x <- seq(-3. 3, .1)
install.packages("mvtnorm")
library(mvtnorm)
dmvnorm(c(0, 0), rep(0, 2), diag(2))
x <- seq(-3. 3, .1)
x <- seq(-3, 3, .1)
y <- x
outer(x, y, function(x, y) { dmvnorm(cbind(x, y))})
f <- function(x, y) { dmvnorm(cbind(x, y)) }
persp(x, y, outer(x, y, f), theta = 30, phi = 30)
contour(x, y, outer(x, y, f))
install.packages("sample")
library(sample)
install.packages("sample")
install.packages(sample)
x <- strata(c("Species"), size=c(3,3,3), method="srswor",
data=iris)
install.packages("sample")
library(sample)
library("sample")
install.packages("sample")
install.packages(c("DBI", "rgdal", "RMySQL", "sp"))
?sample
library("sampling")
install.packages("sampling")
library("sampling")
library(sampling)
x <- strata(c("Species"), size=c(3,3,3), method="srswor",
data=iris)
x
getdata(iris, x)
strata(c("Species"), size=c(3,1,1), method = "srswr", data=iris)
iris$Species2 <- rep(1:2, 75)
strata(c("Species", "Species2"), size = c(1,1,1,1,1,1),
method = "srswr", data=iris)
library(doBy)
library("doBy")
sampleBy(~ Species, frac = .06, data=iris)
library(MASS)
library("MASS")
data(survey)
xtabs(~ Sex + Exer, data=survey)
chisq.test(xtabs(~ Sex + Exer, data=survey))
xtabs(~ W.Hnd + Clap, data=survey)
chisq.test(xtabs(~ W.Hnd + Clap, data=survey))
fisher.test(xtabs(~ W.Hnd + Clap, data = survey))
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list(
"1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")
))
Performance
mcnemar.test(Performance)
binom.test(86, 86 + 150, .5)
table(survey$W.Hnd)
chisq.test(table(survey$W.Hnd), p=c(.3, .7))
shapiro.test(rnorm(1000))
ks.test(rnorm(100), rnorm(100))
rs.test(rnorm(100), runif(100))
ks.test(rnorm(100), runif(100))
ks.test(rnorm(100), "pnorm", 0, 1)
x <- rnorm(1000, mean=10, sd=1)
qqnorm(x)
qqline(x, lty=2)
x <- rcauchy(1000)
qqnorm(X)
qqnorm(x)
qqline(x, lty=2)
cor(iris$Sepal.Width, iris$Sepal.Length)
cor(iris[, 1:4])
symnum(cor(iris[, 1:4]))
?symnum
install.packages("corrgram")
library(corrgram)
library("corrgram")
corrgram(cor(iris[, 1:4]), type="corr", upper.panel = panel.conf)
x <- rnorm(30)
x
t.test(x)
getwd()
read.csv("\R\aaa.csv")
read.csv("\aaa.csv")
read.csv("aaa.csv")
read.csv("C:/Users/krazylab/Documents/aaa.csv")
read.csv("C:/Users/krazylab/Documents/R/aaa.csv")
read.csv("C:/Users/krazylab/Documents/R/aaa.csv")
read.csv("C:\Users\krazylab\Documents\R\aaa.csv")
read.csv("C:\users\krazylab\Documents\R\aaa.csv")
read.csv(C:\Users\krazylab\Documents\R\aaa.csv)
read.csv("C:\Users\krazylab\Documents\R\aaa.csv")
read.csv("C:/Users/krazylab/Documents/R/aaa.csv")
x <- read.csv("C:/Users/krazylab/Documents/R/aaa.csv")
rm=ns(list())
rm(list=ls())
x <- read.csv("C:/Users/krazylab/Documents/R/aaa.csv")
head(x)
x_1 <- x[1:59,]
str(x_1)
install.packages("contrycode-package")
library(countrycode-package)
library("countrycode-package")
library("contrycode-package")
library(contrycode-package)
library('contrycode-package')
install.packages("contrycode-package")
install.packages("contrycode")
install.packages(contrycode)
install.packages("countrycode")
library(countrycode)
library("countrycode")
x_2 <- countrycode(x_1[3,200])
?`countrycode-package`
x_2 <- countrycode(x_1[3,200], "cowc", "iso3c")
head(x_2)
x_2 <- countrycode(x_1[3,200], "country.name", "continent")
head(x_2)
rm(list=ls())
data(cars)
source('~/.active-rstudio-document', echo=TRUE)
m <- lm(dist ~ speed, cars)
m
coef(m)
fitted(m)[1:4]
residuals(m)[1:4]
fitted(m)[1:4] + residuals(m)[1:4]
cars$dist[1:4]
confint(m)
deviance(m)
sum((cars$dist - predict(m, newdata = cars))^2)
summary(m)
anova(m)
full <- lm(dist ~ speed, data=cars)
reduced <- lm(dist ~ 1, data = cars)
full
reduced
anova(reduced, full)
plot(m)
par(mfrow=c(1,2))
plot(m, which=c(4,6))
rm=(list=ls()))
rm=(list=ls())
rm(list=ls())
library(data.table)
library(dplyr)
library("dplyr")
library('dplyr')
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
library(scales)
library(ggplot2)
library("dplyr")
library(ggplot2)
link <-  "https://raw.githubusercontent.com/DavZim/Efficient_Frontier/master/data/fin_data.csv"
dt dt[, date := as.Date(date)]
dt[, date := as.Date(date)]
dt[, idx_price := price/price[1], by = ticker]
dt dt[, date = as.Date(date)]
dt dt[, date := as.Date(date)]
install.packages("data.table")
library(data.table)
library("data.table")
dt dt[, date := as.Date(date)]
dt[, date := as.Date(date)]
?:=
??:=
??data.table
dt dt[, date := as.Date(date)]
dt[, date = as.Date(date)]
dt[, date ;= as.Date(date)]
dt[, date := as.Date(date)]
?":="
dt(dt[, date := as.Date(date)])
dt dt[, date := as.Date(date)]
dt[, idx_price := price/price[1], by = ticker]
link <- "https://raw.githubusercontent.com/DavZim/Efficient_Frontier/master/data/fin_data.csv"
dt dt[, date := as.Date(date)]
# create indexed values
dt[, idx_price := price/price[1], by = ticker]
library("scales", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
dt dt[, date := as.Date(date)]
dt[, date := as.Date(date)]
install.packages("shiny")
library(shiny)
runExample("01_hello")
setwd("C:/Users/krazylab/Desktop/krazylab/project/shiny")
runApp("shiny")
setwd("C:/Users/krazylab/Desktop/krazylab/project")
runApp("shiny")
runExample("01_hello")
runApp("app-1")
setwd("C:/Users/krazylab/Desktop/krazylab/project/shiny")
runApp("app-1")
runApp("app-1",display.mode="showcase")
source('dd.R')
runApp("app-1",display.mode="showcase")
h1("My")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
runApp("app-1",display.mode="showcase")
